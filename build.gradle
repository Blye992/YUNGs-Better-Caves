plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'com.github.johnrengelman.shadow' version '6.0.0'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings minecraft.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
//	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
	compileOnly "com.google.code.findbugs:jsr305:3.0.2"

	// NightConfig used for TOML parsing config file
	shadow "com.electronwill.night-config:toml:${project.nightconfig_toml_version}"
	implementation "com.electronwill.night-config:toml:${project.nightconfig_toml_version}"

	// Autoconfig to automatically wire up config classes to TOML file
	modImplementation ("me.sargunvohra.mcmods:autoconfig1u:${project.auto_config_version}") {
		exclude module: 'fabric-api'
	}
	include ("me.sargunvohra.mcmods:autoconfig1u:${project.auto_config_version}") {
		exclude module: 'fabric-api'
	}

	// Cloth and ModMenu for in-game config menu.
	// Currently not available for 1.17.
//	modImplementation ("me.shedaniel.cloth:config-2:${project.cloth_config_version}") {
//		exclude module: 'fabric-api'
//	}
//	include ("me.shedaniel.cloth:config-2:${project.cloth_config_version}") {
//		exclude module: 'fabric-api'
//	}
//	modImplementation ("io.github.prospector:modmenu:${project.mod_menu_version}"){
//		exclude module: 'fabric-api'
//	}
//	include ("io.github.prospector:modmenu:${project.mod_menu_version}"){
//		exclude module: 'fabric-api'
//	}
}

minecraft {
	accessWidener = file("src/main/resources/bettercaves.aw")
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

shadowJar {
	relocate 'com.electronwill', 'com.yungnickyoung.minecraft.bettercaves'
	configurations = [project.configurations.shadow]
	classifier = "shadow"
}

jar {
	from "LICENSE"
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

task relocateShadowJar(type: ConfigureShadowRelocation) {
	target = tasks.shadowJar
	prefix = "${project.group}.${project.archivesBaseName}.shadow"
}
tasks.shadowJar.dependsOn tasks.relocateShadowJar

remapJar {
	dependsOn shadowJar
	input.set shadowJar.archiveFile.get()
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
}

repositories {
	maven {
		url 'https://maven.fabricmc.net/io/github/prospector/modmenu/'
	}
	maven {
		name "cotton-config"
		url 'http://server.bbkr.space:8081/artifactory/libs-release'
	}
}
